version: 2
jobs:
  build:
    working_directory: ~/phovea
    docker:
      - image: caleydo/phovea_circle_python:1.0
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: install awscli
          command: sudo pip install awscli==1.11.113
      - run:
          name: login ecr and docker hub
          command: |
            cat > ~/.dockercfg << EOF
            {
              "https://index.docker.io/v1/": {
                "auth": "$DOCKER_AUTH"
              }
            }
            EOF
            export AWS_DEFAULT_REGION=eu-central-1
            login="$(aws ecr get-login)"
            ${login}
      - deploy:
          name: build and deploy
          command: |
            case $CIRCLE_BRANCH in
            master)
              awsTag="latest"
              ;;
            *)
              awsTag="${CIRCLE_BRANCH}"
              ;;
            esac
            echo "using tag: --${awsTag}--"
            node build.js --skipTests --skipSaveImage --noDefaultTags --pushExtra=${awsTag} --pushTo=922145058410.dkr.ecr.eu-central-1.amazonaws.com/caleydo
      - store_artifacts:
          path: build
          prefix: build
      - deploy:
          name: restart aws #assumes the task definition is called <reponame>-<branch>
          command: |
            awsFamily="${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}"
            tasksExists=$(aws --output text ecs list-task-definitions --family-prefix ${awsFamily})
            echo "--${tasksExists}--"
            if [ ! -z "$tasksExists" ]; then
              isTaskRunning=$(aws --output text ecs list-tasks --cluster caleydo --family ${awsFamily})
              echo "--${isTaskRunning}--"
              if [ ! -z "$isTaskRunning" ]; then
                taskId=$(cut -f2 ${isTaskRunning})
                echo "--${taskId}--"
                aws --output text ecs stop-task --cluster caleydo --task ${taskId}
              fi
              aws --output text ecs run-task --cluster caleydo --task-definition ${awsFamily} --started-by CircleCIAutoUpdate
            fi
